// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-06-13 22:27:55.203088 -0400 EDT m=+0.034435910

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "blocky@github",
            "url": "https://github.com/0xERR0R/blocky"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/blocking/disable": {
            "get": {
                "description": "disable the blocking status",
                "tags": [
                    "blocking"
                ],
                "summary": "Disable blocking",
                "parameters": [
                    {
                        "type": "string",
                        "format": "duration",
                        "description": "duration of blocking (Example: 300s, 5m, 1h, 5m30s)",
                        "name": "duration",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blocking is disabled"
                    },
                    "400": {
                        "description": "Wrong duration format"
                    }
                }
            }
        },
        "/blocking/enable": {
            "get": {
                "description": "enable the blocking status",
                "tags": [
                    "blocking"
                ],
                "summary": "Enable blocking",
                "responses": {
                    "200": {
                        "description": "Blocking is enabled"
                    }
                }
            }
        },
        "/blocking/status": {
            "get": {
                "description": "get current blocking status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blocking"
                ],
                "summary": "Blocking status",
                "responses": {
                    "200": {
                        "description": "Returns current blocking status",
                        "schema": {
                            "$ref": "#/definitions/api.BlockingStatus"
                        }
                    }
                }
            }
        },
        "/query": {
            "post": {
                "description": "Performs DNS query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "query"
                ],
                "summary": "Performs DNS query",
                "parameters": [
                    {
                        "description": "query data",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "query was executed",
                        "schema": {
                            "$ref": "#/definitions/api.QueryResult"
                        }
                    },
                    "400": {
                        "description": "Wrong request format"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.BlockingStatus": {
            "type": "object",
            "properties": {
                "autoEnableInSec": {
                    "description": "If blocking is temporary disabled: amount of seconds until blocking will be enabled",
                    "type": "integer"
                },
                "enabled": {
                    "description": "True if blocking is enabled",
                    "type": "boolean"
                }
            }
        },
        "api.QueryRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "description": "query for DNS request",
                    "type": "string"
                },
                "type": {
                    "description": "request type (A, AAAA, ...)",
                    "type": "string"
                }
            }
        },
        "api.QueryResult": {
            "type": "object",
            "properties": {
                "reason": {
                    "description": "blocky reason for resolution",
                    "type": "string"
                },
                "response": {
                    "description": "actual DNS response",
                    "type": "string"
                },
                "responseType": {
                    "description": "response type (CACHED, BLOCKED, ...)",
                    "type": "string"
                },
                "returnCode": {
                    "description": "DNS return code (NOERROR, NXDOMAIN, ...)",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "/api/",
	Schemes:     []string{},
	Title:       "blocky API",
	Description: "blocky API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
